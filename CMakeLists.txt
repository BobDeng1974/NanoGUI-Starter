cmake_minimum_required(VERSION 3.9)
project(GUI-Starter)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
set(CMAKE_CXX_STANDARD 11)

#Require OpenGL
find_package(OpenGL REQUIRED)
#Require GLM
find_package(GLM REQUIRED)

# Add the glad OpenGL loader extension
include_directories(ext/glad/include)

# nanoGUI Submodule ------
# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)

# Add the configurations from nanogui
add_subdirectory(ext/nanogui)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")


# On top of adding the path to nanogui/include, you may need extras
include_directories(ext/nanogui/include)
include_directories(${NANOGUI_EXTRA_INCS})

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# ------------------------


#Find all Header and Source files
file(GLOB_RECURSE ${PROJECT_NAME}_HEADERS src/*.h)
file(GLOB_RECURSE ${PROJECT_NAME}_SOURCES src/*.cpp)

add_executable(${PROJECT_NAME}
        ext/glad/src/glad.c
        ${${PROJECT_NAME}_SOURCES}
        ${${PROJECT_NAME}_HEADERS}
        )

#link libraries to project
target_link_libraries(${PROJECT_NAME}
        nanogui
        ${OPENGL_LIBRARIES}
        )